//===================================================
// SETTING GRID FLEXBOX
//===================================================

// ------------------------------------------------------------
// Основные свойства flex-контейнера
// ------------------------------------------------------------

// flex-direction – направление главной оси
// row (по умолчанию) : слева направо (в rtl справа налево)
// row-reverse: справа налево (в rtl слева направо)
// column: сверху вниз
// column-reverse: снизу вверх

// justify-content – выравнивание по главной оси
// flex-start (по умолчанию) : блоки прижаты к началу главной оси
// flex-end: блоки прижаты к концу главной оси
// center: блоки располагаются в центре главной оси
// space-between: первый блок располагается в начале главной оси,
// последний блок – в конце, все остальные блоки равномерно распределены в оставшемся пространстве.
// space-around: все блоки равномерно распределены вдоль главной оси,
// разделяя все свободное пространство поровну.

// align-items – выравнивание по поперечной оси.
// flex-start: блоки прижаты к началу поперечной оси
// flex-end: блоки прижаты к концу поперечной оси
// center: блоки располагаются в центре поперечной оси
// baseline: блоки выровнены по их baseline
// stretch (по умолчанию): блоки растянуты, занимая все доступное
// место по поперечной оси, при этом все же учитываются min-width/max-width, если таковые заданы.

// flex-wrap - многострочность внутри flex-контейнера
// nowrap (значение по умолчанию) : блоки расположены в одну линию
// слева направо (в rtl справа налево)
// wrap: блоки расположены в несколько горизонтальных рядов
// (если не помещаются в один ряд). Они следуют друг за другом слева направо (в rtl справа налево)
// wrap-reverse: то-же что и wrap, но блоки располагаются в обратном порядке.

// flex-flow – удобное сокращение для flex-direction + flex-wrap
// flex-flow: <‘flex-direction’> || <‘flex-wrap’>

// align-content - определяет каким образом образовавшиеся ряды
// блоков будут выровнены по вертикали и как они поделят между
// собой все пространство flex-контейнера.
// align-content работает только в многострочном режиме
// (т.е. в случае flex-wrap:wrap; или flex-wrap:wrap-reverse;)
// flex-start: ряды блоков прижаты к началу flex-контейнера.
// flex-end: ряды блоков прижаты к концу flex-контейнера
// center: ряды блоков находятся в центре flex-контейнера
// space-between: первый ряд блоков располагается в начале flex-контейнера,
// последний ряд блоков блок – в конце, все остальные ряды равномерно
// распределены в оставшемся пространстве.
// space-around: ряды блоков равномерно распределены в от начала до конца
// flex-контейнера, разделяя все свободное пространство поровну.
// stretch (значение по умолчанию): Ряды блоков растянуты, дабы занять все имеющееся пространство.

// ------------------------------------------------------------
// CSS правила для дочерних элементов flex-контейнера (flex-блоков)
// ------------------------------------------------------------

// flex-basis – базовый размер отдельно взятого flex-блока
// flex-grow – “жадность” отдельно взятого flex-блока
// flex-shrink – фактор “сжимаемости” отдельно взятого flex-блока
// flex – короткая запись для свойств flex-grow, flex-shrink и flex-basis

// align-self – выравнивание отдельно взятого flex-блока по поперечной оси.
// flex-start: flex-блок прижат к началу поперечной оси
// flex-end: flex-блок прижат к концу поперечной оси
// center: flex-блок располагаются в центре поперечной оси
// baseline: flex-блок выравнен по baseline
// stretch (значение по умолчанию) : flex-блок растянут, чтобы занять
// все доступное место по поперечной оси, при этом учитываются
// min-width/max-width, если таковые заданы.

// order – порядок следования отдельно взятого flex-блока внутри flex-контейнера.

// ------------------------------------------------------------
// setting flex grid
// ------------------------------------------------------------

// setting flex grid var

$f-row-width: 100%;
$f-col-start: 1;
$f-col-end: 8;
$f-col-margin: .5%;
$f-col-common: 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95;

//setting flex grid row

.f-row {
	display: flex;
	flex-wrap: nowrap;
	width: $f-row-width;
	flex-direction: row;
	box-sizing: border-box;
	align-items: flex-start;
	align-content: flex-start;
	justify-content: flex-start;
	&:before, &:after {
		content: '';
		display: block;
	}
	&:after {clear: both;}
}

// setting flex grid add class

.f-row--nowrap {flex-wrap: nowrap !important;}

//setting flex grid col

[class*='f-col-'] {
	//support old browser
	float: left;
	//new browser
	flex: 0 1 auto;
	box-sizing: border-box;
	margin: 0 $f-col-margin;

	color: $white;
	text-align: center;
	padding: 10px 20px;
	margin-bottom: 20px;
	background-color: tomato;
}

//setting function flex grid col

@for $i from $f-col-start through $f-col-end {
	.f-col-#{$i} {
		width: (100% -(($f-col-margin*2)*$i)) / $i;
		flex: 0 0 (100% -(($f-col-margin*2)*$i)) / $i;
		max-width: (100% -(($f-col-margin*2)*$i)) / $i;
	}
}

//setting function flex grid col commom

@each $i in $f-col-common {
	.f-col-#{$i} {
		width: (percentage($i / 100)) - $f-col-margin*2;
		flex: 0 0 (percentage($i / 100)) - $f-col-margin*2;
		max-width: 0 0 (percentage($i / 100)) - $f-col-margin*2;
	}
}

// ------------------------------------------------------------
// setting flex grid responsive
// ------------------------------------------------------------

@media only screen and (max-width: $screen-medium) {
	.f-row {flex-wrap: wrap;}
	.f-col-10 {
		flex: 0 0 19%;
		max-width: 19%;
	}
	.f-col-8 {
		flex: 0 0 24%;
		max-width: 24%;
	}
}

@media only screen and (max-width: $handheld-large) {
	.f-row--nowrap {flex-wrap: wrap !important;}
	.f-col-4 {
		flex: 0 0 49%;
		max-width: 49%;
	}
	.f-col-30, .f-col-70 {
		flex: 0 0 99%;
		max-width: 99%
	}
}

@media only screen and (max-width: $handheld-medium) {
	[class*='f-col-'] {
		flex: 0 0 99%;
		max-width: 99%;
	}
}